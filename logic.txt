Logic programming

---
We can encode \rfacts\s by creating a \btype\s


```
trait WorldIsFlat
trait GodExists
```

--

We can prove these facts by writing a program which type checks.
If something is an assumption we can simply materialize the type.


```
val worldIsFlat: WorldIsFlat= new WorldIsFlat {}
val godExists: GodExists = new GodExists {}
```


If you now ask me if WorldIsFlat or GodExists then I simply give you the program.

---

Let us now define the standard logic combinators.
\mand\s is straightforward and is simply the tuple (A, B)


```
def and[A, B](a: A, b: B): (A, B) = (a, b)
```


for \mor\s we need to work a bit harder because
we need to construct it from either A or B


```
def orLeft[A, B](a: A): Either[A, B] = Left(a)
def orRight[A, B](b: B): Either[A, B] = Right(b)
```

--

We used type the constructors, Tuple and Either to create
new types which correspond to constructs in logic.

---

We can think about it as some deductive reasoning


```
type ChurchIsRight = (WorldIsFlat, GodExists)
```

--

Can we prove that based on our assumptions? easy.


```
val churchIsRight: ChurchIsRight = (worldIsFlat, godExists)
```

---

We can now think about \rrules\s which are encoded as functions. For example

```
def godReallyExists(ev: ChurchIsRight): GodExists = ev._2
```

---

What we did until now is that we constructed the proofs ourselves because
we wrote explicit implementations which explicitly referenced known
assumptions. We can use the implicit scope to let the compiler find the
correct assumptions for us.

first we make all our assumptions implicit
```
implicit val churchIsReallyRight = churchIsRight
```
---

Exercise1: Write the implicit version of the rule
           if ChurchIsRight then WorldIsFlat.

--

```
implicit def worldIsReallyFlat(implicit ev: ChurchIsRight): WorldIsFlat = ev._1
```
